apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring
---
apiVersion: v1
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    rule_files:
      - "/etc/prometheus-rules/alert.rules"
    alerting:
      alertmanagers:
        - static_configs:
          - targets: ["alertmanager:9093"]
    scrape_configs:
      - job_name: 'chaos-exporter'
        static_configs:
          - targets: ['chaos-exporter.litmus.svc.cluster.local:8080']
      - job_name: kubernetes-service-endpoints
        kubernetes_sd_configs:
          - role: endpoints
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_service_label_component
            regex: apiserver
            action: replace
            target_label: __scheme__
            replacement: https
          - source_labels:
              - __meta_kubernetes_service_label_kubernetes_io_cluster_service
            action: drop
            regex: 'true'
          - source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scrape
            action: drop
            regex: 'false'
          - source_labels:
              - __meta_kubernetes_pod_container_port_name
            action: drop
            regex: .*-noscrape
          - source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scheme
            action: replace
            target_label: __scheme__
            regex: ^(https?)$
            replacement: $1
          - source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_path
            action: replace
            target_label: __metrics_path__
            regex: ^(.+)$
            replacement: $1
          - source_labels:
              - __address__
              - __meta_kubernetes_service_annotation_prometheus_io_port
            action: replace
            target_label: __address__
            regex: '^(.+)(?::\d+);(\d+)$'
            replacement: '$1:$2'
          - action: labelmap
            regex: ^__meta_kubernetes_service_label_(.+)$
            replacement: $1
          - source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_service_name
            separator: /
            target_label: job
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            action: keep
            regex: 'true'
          - source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_pod_label_name
            separator: /
            target_label: job
          - source_labels:
              - __meta_kubernetes_pod_node_name
            target_label: node
      - job_name: kubernetes-nodes
        kubernetes_sd_configs:
          - role: node
        tls_config:
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - target_label: __scheme__
            replacement: https
          - source_labels:
              - __meta_kubernetes_node_label_kubernetes_io_hostname
            target_label: instance
      - job_name: weave
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_pod_label_name
            action: keep
            regex: ^kube-system;weave-net$
          - source_labels:
              - __meta_kubernetes_pod_container_name
              - __address__
            action: replace
            target_label: __address__
            regex: '^weave;(.+?)(?::\d+)?$'
            replacement: '$1:6782'
          - source_labels:
              - __meta_kubernetes_pod_container_name
              - __address__
            action: replace
            target_label: __address__
            regex: '^weave-npc;(.+?)(?::\d+)?$'
            replacement: '$1:6781'
          - source_labels:
              - __meta_kubernetes_pod_container_name
            action: replace
            target_label: job
kind: ConfigMap
metadata:
  name: prometheus-configmap
  namespace: monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-alertrules
  namespace: monitoring
data:
  alert.rules: |
    groups:
    - name: PM2 Alert
      rules:
        # Alert for high error rate in the Sock Shop.
        - alert: HighErrorRate
          expr: rate(request_duration_seconds_count{status_code="500"}[5m]) > 1
          for: 5m
          labels:
            severity: "slack"
          annotations:
            summary: "High HTTP 500 error rates"
            description: "Rate of HTTP 500 errors per 5 minutes: {{ $value }}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
      name: prometheus
    spec:
      containers:
        - args:
            - --storage.tsdb.retention.time=360h
            - --config.file=/etc/prometheus/prometheus.yml
          image: prom/prometheus:v2.25.0
          imagePullPolicy: IfNotPresent
          name: prometheus
          ports:
            - containerPort: 9090
              name: web
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/prometheus
              name: config-volume
            - mountPath: /etc/prometheus-rules
              name: alertrules-volume
      serviceAccount: prometheus
      serviceAccountName: prometheus
      volumes:
        - configMap:
            defaultMode: 420
            name: prometheus-configmap
          name: config-volume
        - configMap:
            defaultMode: 420
            name: prometheus-alertrules
          name: alertrules-volume
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    name: prometheus
  name: prometheus
  namespace: monitoring
spec:
  selector:
    app: prometheus
  type: NodePort
  ports:
  - name: prometheus
    protocol: TCP
    port: 9090
    targetPort: 9090
    nodePort: 31090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      name: grafana
    spec:
      containers:
      - image: grafana/grafana:latest
        imagePullPolicy: Always
        name: grafana
        ports:
        - containerPort: 3000
          name: grafana
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-storage
      volumes:
      - emptyDir: {}
        name: grafana-storage
---
apiVersion: v1
kind: Service
metadata:
  annotations:
  name: grafana
  namespace: monitoring
spec:
  ports:
  - nodePort: 31687
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: grafana
  sessionAffinity: None
  type: NodePort
---
apiVersion: v1
data:
  prometheus-datasource.json: |
    {
      "name": "prometheus",
      "type": "prometheus",
      "url": "http://prometheus:9090",
      "access": "proxy",
      "basicAuth": false
    }
kind: ConfigMap
metadata:
  name: grafana-import-dashboards
  namespace: monitoring
